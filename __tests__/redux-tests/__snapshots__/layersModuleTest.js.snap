// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Redux Layers Module Initial reducer state 1`] = `
Object {
  "data": Array [],
  "downloadedLayerProgress": Object {},
  "importError": null,
  "imported": Array [],
  "importingLayer": false,
  "syncDate": Any<Number>,
  "synced": false,
  "syncing": false,
}
`;

exports[`Redux Layers Module Redux Snapshot Thunk Actions getUserLayers 1`] = `
Array [
  Object {
    "meta": Object {
      "offline": Object {
        "commit": Object {
          "meta": Object {
            "areas": Array [],
          },
          "type": "layers/GET_LAYERS_COMMIT",
        },
        "effect": Object {
          "url": "<API_URL_MOCK>/contextual-layer/?enabled=true",
        },
        "rollback": Object {
          "type": "layers/GET_LAYERS_ROLLBACK",
        },
      },
    },
    "type": "layers/GET_LAYERS_REQUEST",
  },
]
`;

exports[`Redux Layers Module Redux Snapshot Thunk Actions syncLayers 1`] = `
Array [
  Object {
    "meta": Object {
      "offline": Object {
        "commit": Object {
          "meta": Object {
            "areas": Array [],
          },
          "type": "layers/GET_LAYERS_COMMIT",
        },
        "effect": Object {
          "url": "<API_URL_MOCK>/contextual-layer/?enabled=true",
        },
        "rollback": Object {
          "type": "layers/GET_LAYERS_ROLLBACK",
        },
      },
    },
    "type": "layers/GET_LAYERS_REQUEST",
  },
]
`;

exports[`Redux Layers Module Redux Snapshot Thunk Actions syncLayers 2`] = `Array []`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion returns expected state when given an empty progress state 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 0,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when one layer is expected returns expected state when one layer has errorred 1`] = `
Object {
  "completed": true,
  "error": "Test mock error",
  "progress": 100,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when one layer is expected returns expected state when one layer is complete 1`] = `
Object {
  "completed": true,
  "error": null,
  "progress": 100,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when one layer is expected returns expected state when one layer is in progress 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 50,
  "requested": true,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer has errorred & one layer has errorred 1`] = `
Object {
  "completed": true,
  "error": "Test mock error",
  "progress": 100,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer has errorred & one layer is complete 1`] = `
Object {
  "completed": true,
  "error": "Test mock error",
  "progress": 100,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is complete & one layer does not exist 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 50,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is complete & one layer is complete 1`] = `
Object {
  "completed": true,
  "error": null,
  "progress": 100,
  "requested": false,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is in progress & one layer does not exist 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 25,
  "requested": true,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is in progress & one layer has errorred 1`] = `
Object {
  "completed": false,
  "error": "Test mock error",
  "progress": 75,
  "requested": true,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is in progress & one layer is complete 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 75,
  "requested": true,
}
`;

exports[`Redux Layers Module func calculateOverallDownloadProgressForRegion when two layers are expected returns expected state when one layer is in progress & one layer is in progress 1`] = `
Object {
  "completed": false,
  "error": null,
  "progress": 50,
  "requested": true,
}
`;

exports[`Redux Layers Module func deleteRegionFromProgress returns expected state when given an empty progress state 1`] = `Object {}`;

exports[`Redux Layers Module func deleteRegionFromProgress when given a region that does exist returns expected state when one layer exists 1`] = `
Object {
  "layer1": Object {},
}
`;

exports[`Redux Layers Module func deleteRegionFromProgress when given a region that does exist returns expected state when two layers exists 1`] = `
Object {
  "layer1": Object {},
  "layer2": Object {},
}
`;

exports[`Redux Layers Module func deleteRegionFromProgress when given a region that does exist returns expected state when two layers exists alongside other regions 1`] = `
Object {
  "layer1": Object {
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func deleteRegionFromProgress when given a region that does not exist returns expected state when one layer exists 1`] = `
Object {
  "layer1": Object {
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func deleteRegionFromProgress when given a region that does not exist returns expected state when two layers exists 1`] = `
Object {
  "layer1": Object {
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads returns expected state when given an empty progress state 1`] = `Object {}`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one 90% completed layer & one completed state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one 90% completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one errorred layer & one completed state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": true,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one errorred layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": false,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one requested but not completed & one completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given one requested but not completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with only one region per layer returns expected state when given two completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one 90% completed layer & one completed state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
    "area2": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one 90% completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
    "area2": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one errorred layer & one completed state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": true,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one errorred layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": "Test mock error",
      "progress": 100,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one requested but not completed & one completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
    "area2": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given one requested but not completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
    "area2": Object {
      "completed": false,
      "error": null,
      "progress": 0,
      "requested": false,
    },
  },
}
`;

exports[`Redux Layers Module func invalidateIncompleteLayerDownloads with two regions per layer returns expected state when given two completed layer state 1`] = `
Object {
  "layer1": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
  "layer2": Object {
    "area1": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
    "area2": Object {
      "completed": true,
      "error": null,
      "progress": 100,
      "requested": false,
    },
  },
}
`;
