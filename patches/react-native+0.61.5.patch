diff --git a/node_modules/react-native/React/Views/RCTRefreshControl.h b/node_modules/react-native/React/Views/RCTRefreshControl.h
index 64fda72..bec1af8 100644
--- a/node_modules/react-native/React/Views/RCTRefreshControl.h
+++ b/node_modules/react-native/React/Views/RCTRefreshControl.h
@@ -14,5 +14,6 @@
 
 @property (nonatomic, copy) NSString *title;
 @property (nonatomic, copy) RCTDirectEventBlock onRefresh;
+@property (nonatomic, weak) UIScrollView *scrollView;
 
 @end
diff --git a/node_modules/react-native/React/Views/RCTRefreshControl.m b/node_modules/react-native/React/Views/RCTRefreshControl.m
index 26856be..dd84d4c 100644
--- a/node_modules/react-native/React/Views/RCTRefreshControl.m
+++ b/node_modules/react-native/React/Views/RCTRefreshControl.m
@@ -37,12 +37,6 @@ - (void)layoutSubviews
 {
   [super layoutSubviews];
 
-  // Fix for bug #7976
-  // TODO: Remove when updating to use iOS 10 refreshControl UIScrollView prop.
-  if (self.backgroundColor == nil) {
-    self.backgroundColor = [UIColor clearColor];
-  }
-
   // If the control is refreshing when mounted we need to call
   // beginRefreshing in layoutSubview or it doesn't work.
   if (_currentRefreshingState && _isInitialRender) {
@@ -56,32 +50,43 @@ - (void)beginRefreshingProgrammatically
   UInt64 beginRefreshingTimestamp = _currentRefreshingStateTimestamp;
   _refreshingProgrammatically = YES;
   // When using begin refreshing we need to adjust the ScrollView content offset manually.
-  UIScrollView *scrollView = (UIScrollView *)self.superview;
-  CGPoint offset = {scrollView.contentOffset.x, scrollView.contentOffset.y - self.frame.size.height};
     
-  // `beginRefreshing` must be called after the animation is done. This is why it is impossible
-  // to use `setContentOffset` with `animated:YES`.
-  [UIView animateWithDuration:0.25
-                          delay:0
-                        options:UIViewAnimationOptionBeginFromCurrentState
-                     animations:^(void) {
-                       [scrollView setContentOffset:offset];
-                     } completion:^(__unused BOOL finished) {
-                       if(beginRefreshingTimestamp == self->_currentRefreshingStateTimestamp) {
-                         [super beginRefreshing];
-                         [self setCurrentRefreshingState:super.refreshing];
-                       }
-                     }];
+    if (self.scrollView) {
+        UIScrollView *scrollView = self.scrollView;
+        CGPoint offset = {scrollView.contentOffset.x, scrollView.contentOffset.y - self.frame.size.height};
+
+        // `beginRefreshing` must be called after the animation is done. This is why it is impossible
+        // to use `setContentOffset` with `animated:YES`.
+        [UIView animateWithDuration:0.25
+                                delay:0
+                              options:UIViewAnimationOptionBeginFromCurrentState
+                           animations:^(void) {
+                             [scrollView setContentOffset:offset];
+                           } completion:^(__unused BOOL finished) {
+                             if (beginRefreshingTimestamp == self->_currentRefreshingStateTimestamp) {
+                               [super beginRefreshing];
+                               [self setCurrentRefreshingState:super.refreshing];
+                             }
+                           }];
+    } else if (beginRefreshingTimestamp == self->_currentRefreshingStateTimestamp) {
+      [super beginRefreshing];
+    }
 }
 
 - (void)endRefreshingProgrammatically
 {
   // The contentOffset of the scrollview MUST be greater than the contentInset before calling
   // endRefreshing otherwise the next pull to refresh will not work properly.
-  UIScrollView *scrollView = (UIScrollView *)self.superview;
-  if (_refreshingProgrammatically && scrollView.contentOffset.y < -scrollView.contentInset.top) {
+  UIScrollView *scrollView = (UIScrollView *)self.scrollView;
+  if (scrollView && _refreshingProgrammatically && scrollView.contentOffset.y < -scrollView.contentInset.top) {
     UInt64 endRefreshingTimestamp = _currentRefreshingStateTimestamp;
-    CGPoint offset = {scrollView.contentOffset.x, -scrollView.contentInset.top};
+      UIEdgeInsets contentInset;;
+      if (@available(iOS 11.0, *)) {
+          contentInset = scrollView.adjustedContentInset;
+      } else {
+          contentInset = scrollView.contentInset;
+      }
+    CGPoint offset = {scrollView.contentOffset.x, -contentInset.top};
     [UIView animateWithDuration:0.25
                           delay:0
                         options:UIViewAnimationOptionBeginFromCurrentState
diff --git a/node_modules/react-native/React/Views/ScrollView/RCTScrollView.m b/node_modules/react-native/React/Views/ScrollView/RCTScrollView.m
index b028f02..e1af7b6 100644
--- a/node_modules/react-native/React/Views/ScrollView/RCTScrollView.m
+++ b/node_modules/react-native/React/Views/ScrollView/RCTScrollView.m
@@ -348,13 +348,15 @@ - (void)setFrame:(CGRect)frame
 }
 
 #if !TARGET_OS_TV
-- (void)setCustomRefreshControl:(UIView<RCTCustomRefreshContolProtocol> *)refreshControl
+- (void)setCustomRefreshControl:(UIRefreshControl<RCTCustomRefreshContolProtocol> *)refreshControl
 {
   if (_customRefreshControl) {
     [_customRefreshControl removeFromSuperview];
   }
   _customRefreshControl = refreshControl;
-  [self addSubview:_customRefreshControl];
+    // Assign this so we can scroll the scrollView to top when programatically start and end loading
+    refreshControl.scrollView = self;
+    self.refreshControl = refreshControl;
 }
 
 - (void)setPinchGestureEnabled:(BOOL)pinchGestureEnabled
@@ -468,7 +470,7 @@ - (void)insertReactSubview:(UIView *)view atIndex:(NSInteger)atIndex
   [super insertReactSubview:view atIndex:atIndex];
 #if !TARGET_OS_TV
   if ([view conformsToProtocol:@protocol(RCTCustomRefreshContolProtocol)]) {
-    [_scrollView setCustomRefreshControl:(UIView<RCTCustomRefreshContolProtocol> *)view];
+    [_scrollView setCustomRefreshControl:(UIRefreshControl<RCTCustomRefreshContolProtocol> *)view];
     if (![view isKindOfClass:[UIRefreshControl class]]
         && [view conformsToProtocol:@protocol(UIScrollViewDelegate)]) {
       [self addScrollListener:(UIView<UIScrollViewDelegate> *)view];
@@ -540,15 +542,6 @@ - (void)layoutSubviews
   [super layoutSubviews];
   RCTAssert(self.subviews.count == 1, @"we should only have exactly one subview");
   RCTAssert([self.subviews lastObject] == _scrollView, @"our only subview should be a scrollview");
-
-#if !TARGET_OS_TV
-  // Adjust the refresh control frame if the scrollview layout changes.
-  UIView<RCTCustomRefreshContolProtocol> *refreshControl = _scrollView.customRefreshControl;
-  if (refreshControl && refreshControl.isRefreshing) {
-    refreshControl.frame = (CGRect){_scrollView.contentOffset, {_scrollView.frame.size.width, refreshControl.frame.size.height}};
-  }
-#endif
-
   [self updateClippedSubviews];
 }
 
diff --git a/node_modules/react-native/React/Views/ScrollView/RCTScrollableProtocol.h b/node_modules/react-native/React/Views/ScrollView/RCTScrollableProtocol.h
index e7720c0..7b4b23b 100644
--- a/node_modules/react-native/React/Views/ScrollView/RCTScrollableProtocol.h
+++ b/node_modules/react-native/React/Views/ScrollView/RCTScrollableProtocol.h
@@ -37,5 +37,6 @@
 
 @property (nonatomic, copy) RCTDirectEventBlock onRefresh;
 @property (nonatomic, readonly, getter=isRefreshing) BOOL refreshing;
+@property (nonatomic, weak) UIScrollView *scrollView;
 
 @end
diff --git a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
index ef2ae93..2795802 100644
--- a/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
+++ b/node_modules/react-native/ReactAndroid/src/main/java/com/facebook/react/modules/systeminfo/AndroidInfoModule.java
@@ -92,7 +92,7 @@ public class AndroidInfoModule extends ReactContextBaseJavaModule implements Tur
 
   private Boolean isRunningScreenshotTest() {
     try {
-      Class.forName("android.support.test.rule.ActivityTestRule");
+      Class.forName("androidx.test.rule.ActivityTestRule");
       return true;
     } catch (ClassNotFoundException ignored) {
       return false;
diff --git a/node_modules/react-native/scripts/.packager.env b/node_modules/react-native/scripts/.packager.env
new file mode 100644
index 0000000..361f5fb
--- /dev/null
+++ b/node_modules/react-native/scripts/.packager.env
@@ -0,0 +1 @@
+export RCT_METRO_PORT=8081
